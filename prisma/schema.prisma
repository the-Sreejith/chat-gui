// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Preferences
  preferredModelId String?
  theme            String  @default("light")
  
  // API Keys
  openrouterApiKey String?
  geminiApiKey     String?
  
  // Usage Limits
  monthlyTokenLimit Int?    @default(100000)
  dailyTokenLimit   Int?    @default(10000)
  
  // Billing Alerts
  billingAlertThreshold Float? @default(10.0)
  billingAlertsEnabled  Boolean @default(true)

  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
  apiUsage      ApiUsage[]
  preferredModel Model? @relation(fields: [preferredModelId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Provider {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  models Model[]
}

model Model {
  id                        String   @id @default(cuid())
  providerId                String
  modelName                 String
  modelIdentifier           String   @unique
  basePricePer1kTokens      Decimal? @db.Decimal(10, 8)
  inputPricePer1kTokens     Decimal  @db.Decimal(10, 8)
  outputPricePer1kTokens    Decimal  @db.Decimal(10, 8)
  contextLength             Int
  isActive                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  messages Message[]
  users    User[]

  @@index([providerId, isActive])
}

model Conversation {
  id        String   @id @default(cuid())
  title     String   @default("New Conversation")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([userId, updatedAt])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           Role
  content        String   @db.Text
  tokens         Int?
  inputTokens    Int?
  outputTokens   Int?
  cost           Float?
  modelId        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  model        Model?       @relation(fields: [modelId], references: [id])

  @@index([conversationId, createdAt])
}

model ApiUsage {
  id           String   @id @default(cuid())
  userId       String
  modelId      String?
  inputTokens  Int      @default(0)
  outputTokens Int      @default(0)
  totalTokens  Int
  cost         Float
  endpoint     String
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum Role {
  USER
  ASSISTANT
  SYSTEM
}